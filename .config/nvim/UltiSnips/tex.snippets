global !p
def math():
    return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def comment(): 
    return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
    [x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
    return x != '0' and x != '0'

endglobal

snippet beg "begin{} / end{}" bA
\begin{$1}
	$0
\end{$1}
endsnippet

snippet eq "begin{equation*} / end{equation*}" b
\begin{equation*}
	$0
\end{equation*}
endsnippet

snippet eqa "begin{equation*} begin{aligned} / end{aligned} end{equation*}" b
\begin{equation*}
	\begin{aligned}
		&$0
	\end{aligned}
\end{equation*}
endsnippet

context "aligned()"
context "math()"
snippet tx "insert comment" bA
\text{$0}
endsnippet

snippet nl "\newline" bA
\newline$0
endsnippet

context "aligned()"
context "math()"
snippet frc "insert frac" bA
\frac{$0}{$1}
endsnippet

context "aligned()"
context "math()"
snippet sqr "insert square root" bA
\sqrt{$0}
endsnippet

snippet mm "inline math" bA
\($0\)
endsnippet


snippet ifig "insert figure" bA
\begin{figure}[h]
	\centering
	\frame{\includegraphics[width=\linewidth]{$1}}
	\caption{$2}
	\label{fig:$3}
\end{figure}
endsnippet

snippet sq "Solve a quadratic function" bA
`!p snip.rv= '\\begin{equation*}'`
`!p snip.rv= '    \\begin{aligned}'`
`!p snip.rv='        & ' + snip.v.text + ' \\hspace{0.5cm}\\text{we use the quadratic formula} \\\\'`
`!p snip.rv='        &=\\frac{-b\mp\sqrt{(b)^2-4(a)(c)}}{2a} \\\\'`
`!p # responsible for handling substitution step 
from sympy import *
from sympy.parsing.latex import parse_latex
from sympy.printing.latex import latex

quad = parse_latex(snip.v.text)

quadpoly = Poly(quad)

coeff = simplify(quad, evaluate=False).args

c = coeff[0]
b = Poly(coeff[1]).coeffs()[0]
a = Poly(coeff[2]).coeffs()[0]
snip.rv='        &=\\frac{-('+str(b)+')\\mp\\sqrt{('+str(b)+')^2-4('+str(a)+')('+str(c)+')})}{2\\times'+str(c)+'} \\\\'
`
`!p #responsible for initial simplification
snip.rv='        &=\\frac{('+str(-1 * b)+')\\mp\\sqrt{('+str(b*b)+')'+str(-4 * a * c)+'})}{'+str(c*a)+'} \\\\'
`
`!p #responsible for discriminant simplification
snip.rv='        &=\\frac{('+str(-1 * b)+')\\mp\\sqrt{('+str((b*b)+(-4 * a * c))+'})}{'+str(c*a)+'} \\\\'
`
`!p #test for negitive discriminant -> no point working out roots
if ((b*b)+(-4 * a * c)) < 0:
	roots=0
elif((b*b)+(-4 * a * c)) == 0:
	roots=1
else: 
	roots=2
`
`!p snip.rv='    \\end{aligned}'`
`!p snip.rv='\\end{equation*}'`
endsnippet

snippet diff "differentiate function that was selected in highlight mode" bA
`!p snip.rv= '\\begin{equation*}'`
`!p snip.rv= '    \\begin{aligned}'`
`!p snip.rv='        & ' + snip.v.text + ' \\hspace{0.5cm}\\text{we use the quick differentiation method, times and take} \\\\'`
`!p from sympy import Derivative
from sympy.parsing.latex import parse_latex
from sympy.printing.latex import latex
d = Derivative(parse_latex(snip.v.text))
snip.rv="        & " + str(latex(d.doit()))`
`!p snip.rv='    \\end{aligned}'`
`!p snip.rv='\\end{equation*}'`
endsnippet
